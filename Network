import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

class Solution {
    public int solution(int n, int[][] computers) {
        List<Set<Integer>> list = Arrays.stream(computers)
                .map(Solution::toList)
                .collect(Collectors.toList());
        // 각 컴퓨터의 연결정보를 가지는 list
        // [[1, 1, 0], [1, 1, 0], [0, 0, 1]]  to  [[0,1], [0,1] , [2] ]
        
        List<Integer> tmp ;
        int idx;
        for(int i=0; i< n; i++) {   
            // 컴퓨터
            int finalI = i;
            idx = 0;
            tmp = IntStream.range(0, list.size())
                    .boxed()
                    .filter(v -> list.get(v).contains(finalI))
                    .collect(Collectors.toList());
            // list 에서 i 인덱스의 컴퓨터가 포함된 리스트를 모두 찾음
            // i=0 인 경우  tmp  = 0 , 1   
            // i=1 인경우 tmp = 0
            // i=2 인경우 tmp = 1
            while(!list.get(idx).contains(finalI)) {
                // list에서 i가 포함된 첫번째 인덱스를 찾음
                // i=0 인경우 idx = 0;
                // i=1 인경우 idx = 0
                // i=2 인경우 idx = 1
                idx++;
            }

            for(int j = tmp.size()-1; j >0; j--) {
                // i 인덱스에 포함된 컴퓨터들을 첫번째 인덱스에 모두 넣음
                // list의 첫번째 인덱스만 남기고 지움
                // i= 0 인경우 j는 1만 돌게 되며
                // list는 [[0,1], [2] ] 으로 변함
                // i=1 인경우 이 반복문은 동작하지 않음
                // i=2 인경우 이 반복문은 동작하지 않음
                int removeIdx = tmp.get(j);
                Set<Integer> set = list.get(removeIdx);
                list.get(idx).addAll(set);
                list.remove(removeIdx);
            }
            // list = [[0,1], [2] ] 
            // size return
        }
        return list.size();
    }
    public static Set<Integer> toList(int [] nums) {
        return IntStream.range(0, nums.length)
                .filter(i -> nums[i] == 1)
                .boxed()
                .collect(Collectors.toSet());
    }
}
