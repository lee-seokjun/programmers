import java.util.*;
import java.util.stream.Collectors;

class Solution {
    static int[][] staticMaps;
    static int maxX;
    static int maxY;
    public int solution(int[][] maps) {
        staticMaps = maps;
        Queue<Point> queue = new LinkedList<>();
        queue.add(new Point(0, 0, null));
        maxX = maps[0].length - 1;
        maxY = maps.length - 1 ;
        int queueLength;
        int idx = 0;
        
        while((queueLength = queue.size()) != 0)  {
            Set<Point> set = new HashSet<>();
            for(int j = 0; j < queueLength; j++) {
                Point point = queue.poll();
                if(!set.add(point)) {
                    continue;
                }
                staticMaps[point.y][point.x] = 0;
                if(point.x == maxX && point.y == maxY) {
                    return idx + 1;
                }
                queue.addAll(point.goTo());
            }
            idx++;
        }
        return -1;
    }
}

class Point {
    public int x;
    public int y;
    public Point before;
    public Queue<Point> queue;
    public Point(int x, int y, Point before) {
        this.x = x;
        this.y = y;
        this.before = before;
    }
    
    public Queue<Point> goTo() {
        this.queue = new LinkedList<>();
        addOrNoting(new Point(x - 1, y, this));
        addOrNoting(new Point(x + 1, y, this));
        addOrNoting(new Point(x, y + 1, this));
        addOrNoting(new Point(x, y - 1 , this));
        return queue;
    }
    
    public void addOrNoting(Point next) {
        if(next.equals(this.before)) {
            return;
        }
        if(next.x < 0 || next.y < 0 ||  next.x > Solution.maxX || next.y > Solution.maxY) {
            return;
        }
        if(Solution.staticMaps[next.y][next.x] == 1) {
            queue.add(next);
        }
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Point point = (Point) o;
        return x == point.x && y == point.y;
    }

    @Override
    public int hashCode() {
        return Objects.hash(x, y);
    }

}